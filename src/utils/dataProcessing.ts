// Helper function to generate random dates within a range
const randomDate = (start: Date, end: Date) => {
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
};

// Format date to string
const formatDate = (date: Date) => {
  return date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
};

// Extract potential dates from context
const extractDates = (context: string) => {
  // This is a placeholder. In a real application, this would use NLP or AI
  // to extract actual dates from the context
  
  // For now, just generating random dates between 1900-2000
  const startDate = new Date(1900, 0, 1);
  const endDate = new Date(2000, 11, 31);
  
  const dates = [];
  for (let i = 0; i < 5; i++) {
    dates.push(randomDate(startDate, endDate));
  }
  
  // Sort dates chronologically
  return dates.sort((a, b) => a.getTime() - b.getTime());
};

// Generate placeholder timeline data based on context
export const processTimelineData = (context: string) => {
  const dates = extractDates(context);
  
  // Extract potential keywords from context
  const words = context.split(/\s+/).filter(word => word.length > 5);
  
  // Generate sample timeline events
  return dates.map((date, index) => {
    const randomWord = words[Math.floor(Math.random() * words.length)];
    
    return {
      date: formatDate(date),
      title: `Historical Event ${index + 1}: ${randomWord || 'Significant Moment'}`,
      description: `This is a description of the historical event that occurred on ${formatDate(date)}. In a real application, this would be generated by AI based on the historical context.`,
      key_figures: ['Historical Figure A', 'Historical Figure B']
    };
  });
};

// Generate placeholder mind map data based on context
export const processMindMapData = (context: string) => {
  // This is a placeholder. In a real application, this would use NLP or AI
  // to extract concepts and relationships from the context
  
  // Sample nodes and edges for a mind map
  const nodes = [
    {
      id: 'central',
      type: 'input',
      data: { label: 'Central Historical Event' },
      position: { x: 250, y: 250 },
      style: { 
        background: 'hsl(var(--primary))',
        color: 'white',
        border: 'none',
        borderRadius: '8px',
        padding: '10px',
        width: 180,
      },
    },
    {
      id: 'economic',
      data: { label: 'Economic Factors' },
      position: { x: 100, y: 100 },
      style: { borderRadius: '8px', padding: '10px' },
    },
    {
      id: 'social',
      data: { label: 'Social Structures' },
      position: { x: 400, y: 100 },
      style: { borderRadius: '8px', padding: '10px' },
    },
    {
      id: 'tech',
      data: { label: 'Technological Developments' },
      position: { x: 100, y: 400 },
      style: { borderRadius: '8px', padding: '10px' },
    },
    {
      id: 'cultural',
      data: { label: 'Cultural Influences' },
      position: { x: 400, y: 400 },
      style: { borderRadius: '8px', padding: '10px' },
    },
    {
      id: 'economic1',
      data: { label: 'Trade Routes' },
      position: { x: 0, y: 50 },
      style: { borderRadius: '8px', padding: '10px' },
    },
    {
      id: 'social1',
      type: 'output',
      data: { label: 'Class Structure' },
      position: { x: 500, y: 50 },
      style: { borderRadius: '8px', padding: '10px' },
    },
  ];

  const edges = [
    { id: 'e1-2', source: 'central', target: 'economic', animated: true, label: 'Influenced' },
    { id: 'e1-3', source: 'central', target: 'social', animated: true, label: 'Created' },
    { id: 'e1-4', source: 'central', target: 'tech', animated: true, label: 'Developed from' },
    { id: 'e1-5', source: 'central', target: 'cultural', animated: true, label: 'Expressed in' },
    { id: 'e2-6', source: 'economic', target: 'economic1', animated: false, label: 'Included' },
    { id: 'e3-7', source: 'social', target: 'social1', animated: false, label: 'Comprised of' },
  ];

  return { nodes, edges };
};

// Generate placeholder geography data based on context
export const processGeographyData = (context: string) => {
  // This is a placeholder. In a real application, this would use NLP or AI
  // to extract locations and geographic information from the context
  
  // Sample geographic data
  return {
    features: [],
    events: [
      {
        name: 'Historical Event 1',
        date: '1914',
        description: 'A significant historical event',
        longitude: 2.3522,
        latitude: 48.8566,
      },
      {
        name: 'Historical Event 2',
        date: '1916',
        description: 'Another significant historical event',
        longitude: 13.4050,
        latitude: 52.5200,
      },
      {
        name: 'Historical Event 3',
        date: '1917',
        description: 'A third significant historical event',
        longitude: 30.3086,
        latitude: 59.9375,
      },
      {
        name: 'Historical Event 4',
        date: '1918',
        description: 'A fourth significant historical event',
        longitude: -77.0369,
        latitude: 38.9072,
      },
    ],
  };
};

// Generate placeholder character network data based on context
export const processCharacterNetworkData = (context: string) => {
  // This is a placeholder. In a real application, this would use NLP or AI
  // to extract characters and their relationships from the context
  
  // Sample nodes and edges for a character network
  const nodes = [
    {
      id: 'char1',
      data: { 
        label: 'Historical Figure A',
        role: 'leader',
      },
      position: { x: 250, y: 250 },
      style: { 
        background: 'hsl(var(--primary))',
        color: 'white',
        border: 'none',
        borderRadius: '50%',
        padding: '10px',
        width: 150,
        height: 150,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        textAlign: 'center',
      },
    },
    {
      id: 'char2',
      data: { 
        label: 'Historical Figure B',
        role: 'ally',
      },
      position: { x: 100, y: 100 },
      style: { 
        borderRadius: '50%',
        padding: '10px',
        width: 100,
        height: 100,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        textAlign: 'center',
      },
    },
    {
      id: 'char3',
      data: { 
        label: 'Historical Figure C',
        role: 'ally',
      },
      position: { x: 400, y: 100 },
      style: { 
        borderRadius: '50%',
        padding: '10px',
        width: 100,
        height: 100,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        textAlign: 'center',
      },
    },
    {
      id: 'char4',
      data: { 
        label: 'Historical Figure D',
        role: 'opponent',
      },
      position: { x: 100, y: 400 },
      style: { 
        background: 'hsl(var(--destructive))',
        color: 'white',
        border: 'none',
        borderRadius: '50%',
        padding: '10px',
        width: 100,
        height: 100,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        textAlign: 'center',
      },
    },
    {
      id: 'char5',
      data: { 
        label: 'Historical Figure E',
        role: 'opponent',
      },
      position: { x: 400, y: 400 },
      style: { 
        background: 'hsl(var(--destructive))',
        color: 'white',
        border: 'none',
        borderRadius: '50%',
        padding: '10px',
        width: 100,
        height: 100,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        textAlign: 'center',
      },
    },
  ];

  const edges = [
    { 
      id: 'e1-2', 
      source: 'char1', 
      target: 'char2', 
      animated: true, 
      label: 'Ally',
      style: { stroke: 'hsl(var(--primary))' },
    },
    { 
      id: 'e1-3', 
      source: 'char1', 
      target: 'char3', 
      animated: true, 
      label: 'Mentor',
      style: { stroke: 'hsl(var(--primary))' },
    },
    { 
      id: 'e1-4', 
      source: 'char1', 
      target: 'char4', 
      animated: true, 
      label: 'Enemy',
      style: { stroke: 'hsl(var(--destructive))' },
    },
    { 
      id: 'e1-5', 
      source: 'char1', 
      target: 'char5', 
      animated: true, 
      label: 'Rival',
      style: { stroke: 'hsl(var(--destructive))' },
    },
    { 
      id: 'e2-3', 
      source: 'char2', 
      target: 'char3', 
      animated: false, 
      label: 'Friend',
      style: { stroke: 'hsl(var(--primary))' },
    },
    { 
      id: 'e4-5', 
      source: 'char4', 
      target: 'char5', 
      animated: false, 
      label: 'Collaborator',
      style: { stroke: 'hsl(var(--destructive))' },
    },
  ];

  return { nodes, edges };
};
